#pragma kernel CSDiffuse
#pragma kernel CSSpecular
RWTexture2D<float4> _LUT;

#define PI 3.14159265
float _IntegralInterval;
float _LutSize;

float3 Gaussian(float v,float r)
{
    return 1.0/sqrt(2.0 * PI * v) * exp(-(r*r)/(2.0*v));
}

float3 NvidiaDiffusionProfile(float r)
{
    return float3(0.0, 0.0, 0.0)
        + Gaussian(0.0064, r) * float3(0.233, 0.455, 0.649)
        + Gaussian(0.0484, r) * float3(0.100, 0.336, 0.344)
        + Gaussian(0.187, r) * float3(0.118, 0.198, 0.0)
        + Gaussian(0.567, r) * float3(0.113, 0.007, 0.007)
        + Gaussian(1.99, r) * float3(0.358, 0.004, 0.0)
        + Gaussian(7.41, r) * float3(0.233, 0.0, 0.0);
}
float3 BakeSkinDiffuseLUT(float2 uv)
{
    //ring integrate
    float NoL = uv.x;
    float INV_R = uv.y;

    float theta = acos(NoL * 2.0 - 1.0);
    float R = 1.0/INV_R;

    float3 scatteringFactor = float3(0.0, 0.0, 0.0);
    float3 normalizationFactor = float3(0.0, 0.0, 0.0);

    for(float x = -PI * _IntegralInterval /2 ;x < PI * _IntegralInterval /2 ;x+=PI*0.0001)
    {
        float dis = 2.0 * R * sin(x/2);
        scatteringFactor += saturate(cos(x + theta)) * NvidiaDiffusionProfile(dis);
        normalizationFactor += NvidiaDiffusionProfile(dis);
    }

    float3 result = scatteringFactor/normalizationFactor;
    result=pow(abs(result),1/2.2);
    return result;
}

float PHBeckMann(float ndoth,float m)
{
    float alpha=acos(ndoth);
    float ta=tan(alpha);
    float val=1.0/(m*m*pow(ndoth,4.0))*exp(-(ta*ta)/(m*m));
    return val;
}

float BakeSkinSpecularLUT(float2 uv)
{
    return 0.5*pow(PHBeckMann(uv.x,uv.y),0.1);
}

[numthreads(8,8,1)]
void CSDiffuse (uint3 id : SV_DispatchThreadID)
{
    _LUT[id.xy] = float4( BakeSkinDiffuseLUT(id.xy/_LutSize).rgb,1.0);
}

[numthreads(8,8,1)]
void CSSpecular (uint3 id : SV_DispatchThreadID)
{
    _LUT[id.xy] = float4( BakeSkinSpecularLUT(id.xy/_LutSize),1.0,1.0,1.0);
}
